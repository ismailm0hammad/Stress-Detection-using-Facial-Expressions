# -*- coding: utf-8 -*-
"""stress_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f_AHjm2-tQtYpBr04w5_b-zrW6EK_pEP
"""

train_path = r'I:\DLProject\images\stress_images\train'
val_path = r'I:\DLProject\images\stress_images\validation'

from tensorflow.keras.preprocessing.image import ImageDataGenerator

image_generator = ImageDataGenerator(rescale=1. / 255, )
train_ds = image_generator.flow_from_directory(
    train_path,
    color_mode='grayscale',
    target_size=(48, 48),
    batch_size=32,
    class_mode='categorical',
    subset='training'
)

val_ds = image_generator.flow_from_directory(
    val_path,
    color_mode='grayscale',
    target_size=(48, 48),
    batch_size=32,
    class_mode='categorical'
)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

# Define model
model = Sequential()

# Input layer
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(48, 48, 1)))

# Convolutional layers with regularization
model.add(Conv2D(32, (3, 3), activation='relu', kernel_regularizer='l2'))
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.2))

model.add(Conv2D(64, (3, 3), activation='relu', kernel_regularizer='l2'))
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.2))

model.add(Conv2D(128, (3, 3), activation='relu', kernel_regularizer='l2'))
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.2))

# Flatten layer
model.add(Flatten())

# Dense layers with regularization
model.add(Dense(256, activation='relu', kernel_regularizer='l2'))
model.add(Dropout(0.3))

# Output layer
model.add(Dense(2, activation='softmax'))  # 2 for stress and calm classes

# Compile the model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
# ... (use the generated train_generator and validation_generator here)
history = model.fit(
    train_ds,
    epochs=10,
    validation_data=val_ds,
    verbose=1  # Set to 2 for more detailed training progress
)

# save the model
model.save('stress_detection.keras')
